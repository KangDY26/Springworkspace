05_의존성 주입.txt

# 의존성 주입 (Dependency Injection, DI)

	- 해당 클래스 내부에서 필요한 다른 클래스의 인스턴스를
	  직접 생성자를 통해 생성하지 않고 외부에서 생성된 객체를 주입받는 방식
	- 의존 관계에 있는 클래스의 생성자 사용을 금지하여 코드의 결합도를 낮출 수 있다
	  (코드의 결합도가 낮아지면 유지 보수가 좋아진다)
	- 스프링은 객체들의 인스턴스를 미리 생성하여 스프링 컨텍스트에 등록하여 보관하고 있다가
	  해당 인스턴스가 필요한 곳에 보관중이던 인스턴스를 주입해준다
	- 해당 클래스의 인스턴스를 미리 생성하여 스프링 컨텍스트에 보관하기 위해서는
	  해당 클래스 위에 적절한 어노테이션을 사용해야 한다 (e.g. @Controller)
	- 이처럼 미리 생성하여 스프링 컨텍스트에 보관하는 인스턴스들에는 싱글톤 디자인 패턴이 적용되어 있다
	  (메모리 낭비를 최소화 하는 디자인 패턴)
	  
# 등록해 놓으면 스프링이 자동으로 수거해가는 어노테이션들

   @Component
   
   	- 컨텍스트 로드(서버 실행)시 스프링이 자동으로 수거해가는 모든 대상들을 컨포넌트라고 부른다
   	- 용도 구분없이 해당 클래스가 컴포넌트임을 표시해놓는 어노테이션
   	- 이 어노테이션을 클래스 위에 달아놓으면 스프링 컨텍스트에 수거되는 대상이 된다

   @Controller
   
   	- 컴포넌트들 중에서도 MVC 디자인 패턴에서 컨트롤러 역할을 하는
   	  컴포넌트들을 등록 할 때 사용하는 어노테이션
   	- 이 어노테이션을 클래스 위에 달아놓으면 스프링 컨텍스트에 수거되는 대상이 된다 
   	
   @Repository
   
    - 컴포넌트들 중에서도 데이터 저장소(DB 등)에 엑세스하는 컴포넌트들을 등록할 때 사용하는 어노테이션
    - 이 어노테이션을 클래스 위에 달아놓으면 스프링 컨텍스트에 수거되는 대상이 된다
    
   @Servic
   
   	- 컴포넌트들 중에서도 비즈니스 로직을 수행하는 컴포넌트들을 등록할 때 사용하는 어노테이션
   	  ※ 비즈니스 로직 - 프로그램의 로직은 회사에서 어떤 일을 하느냐에 달라지기 때문에 
   	  				비즈니스 로직이라고 부른다
    
    
    
    
    